/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package info.varden.anatychia;

import java.awt.Frame;
import java.io.File;
import java.nio.charset.Charset;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.jnbt.CompressionMode;

/**
 *
 * @author Marius
 */
public class FilterListGui extends javax.swing.JDialog {
    
    private final Frame parent;
    private final HashMap<String, MaterialData> filters;
    private boolean saved = false;

    /**
     * Creates new form FilterListGui
     */
    public FilterListGui(java.awt.Frame parent, HashMap<String, MaterialData> filters) {
        super(parent, true);
        this.parent = parent;
        this.filters = filters;
        initComponents();
        updateFilterList();
    }
    
    private void updateFilterList() {
        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = filters.keySet().toArray(new String[0]);
            @Override
            public int getSize() { return strings.length; }
            @Override
            public Object getElementAt(int i) { return strings[i]; }
        });
    }
    
    public boolean isSaved() {
        return this.saved;
    }
    
    public boolean shouldStoreFilters() {
        return jCheckBox1.isSelected();
    }
    
    public void setStoreFilters(boolean b) {
        jCheckBox1.setSelected(b);
    }
    
    public HashMap<String, MaterialData> getFilters() {
        return this.filters;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Advanced filters");
        setModal(true);

        jLabel1.setText("New filter");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item", "Entity" }));

        jButton1.setText("Set up...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("List of advanced filters");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        jButton2.setText("Delete selected");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Do not clear these filters when new a new world is analyzed");

        jButton3.setText("Save selected...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Save all...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Clear filters");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setText("<html>Filters are automatically cleared every time you press the Analyze button.\n<br>Checking the above checkbox will turn off this feature.</html>");

        jButton6.setText("Save and close");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Close and discard changes");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Rename");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Edit filter");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Load from file...");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jComboBox1, 0, 604, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jCheckBox1)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton7))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton9)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton8)
                    .addComponent(jButton9)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        MaterialType t = MaterialType.getFromString((String) jComboBox1.getSelectedItem());
        FilterBase fb = new FilterBase(this.parent, new CommonNameDictionary(t));
        fb.setLocationRelativeTo(this);
        fb.setVisible(true);
        if (fb.isSaved()) {
            NBTCriterion[] cs = fb.getCriteriaList();
            String n = "Untitled " + t.getName() + " filter";
            int attempt = 2;
            while (this.filters.containsKey(n)) {
                n = String.format("Untitled " + t.getName() + " filter (%s)", attempt);
                attempt++;
            }
            this.filters.put(n, new MaterialData(t, "", 0, cs, 1D));
            updateFilterList();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        this.saved = true;
        this.dispose();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        this.saved = false;
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        String n = (String) jList1.getSelectedValue();
        MaterialData d = this.filters.get(n);
        FilterBase fb = new FilterBase(this.parent, new CommonNameDictionary(d.getType()), d.getEntityCriteria(), d.getRemovalChance());
        fb.setLocationRelativeTo(this);
        fb.setVisible(true);
        if (fb.isSaved()) {
            NBTCriterion[] cs = fb.getCriteriaList();
            this.filters.put(n, new MaterialData(d.getType(), "", 0, cs, fb.getRemovalChance()));
            updateFilterList();
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.filters.clear();
        updateFilterList();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.filters.remove((String) jList1.getSelectedValue());
        updateFilterList();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String n = (String) jList1.getSelectedValue();
        String newName = n;
        boolean success = false;
        while (!success) {
            newName = JOptionPane.showInputDialog(this, "Please enter a new name for the filter:", n);
            success = true;
            if (newName == null || newName.equals(n)) return;
            if (this.filters.containsKey(newName)) {
                //JOptionPane.showOptionDialog(this, "A filter by that name already exists!", "Rename filter", JOptionPane.OK_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[] {"OK"}, "OK");
                JOptionPane.showMessageDialog(this, "A filter by that name already exists!", "Rename filter", JOptionPane.WARNING_MESSAGE);
                success = false;
            }
        }
        MaterialData d = this.filters.get(n);
        this.filters.remove(n);
        this.filters.put(newName, d);
        updateFilterList();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            JFileChooser jfc = FileDialogUI.getFilterSaveChooser();
            int sfd = jfc.showSaveDialog(this);
            if (sfd != JFileChooser.APPROVE_OPTION) return;
            File path = jfc.getSelectedFile();
            final String n = (String) jList1.getSelectedValue();
            final MaterialData d = this.filters.get(n);
            if (path.getName().endsWith(".nbt")) {
                CriteriaConverter.toNBTFile(new HashMap<String, MaterialData>() {{
                    put(n, d);
                }}, path, CompressionMode.GZIP);
            } else if (path.getName().endsWith(".json")) {
                CriteriaConverter.toJSONFile(new HashMap<String, MaterialData>() {{
                    put(n, d);
                }}, path, (Charset.isSupported("UTF-8") ? Charset.forName("UTF-8") : Charset.defaultCharset()));
            } else if (path.getName().endsWith(".xml")) {
                CriteriaConverter.toXMLFile(new HashMap<String, MaterialData>() {{
                    put(n, d);
                }}, path, (Charset.isSupported("UTF-8") ? Charset.forName("UTF-8") : Charset.defaultCharset()));
            } else if (path.getName().endsWith(".yml") || path.getName().endsWith(".yaml")) {
                CriteriaConverter.toYAMLFile(new HashMap<String, MaterialData>() {{
                    put(n, d);
                }}, path, (Charset.isSupported("UTF-8") ? Charset.forName("UTF-8") : Charset.defaultCharset()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            boolean exists = true;
            File path = null;
            JFileChooser jfc = FileDialogUI.getFilterSaveChooser();
            while (exists) {
                int sfd = jfc.showSaveDialog(this);
                if (sfd != JFileChooser.APPROVE_OPTION) return;
                path = jfc.getSelectedFile();
                exists = path.exists();
                if (exists) {
                    int n = JOptionPane.showOptionDialog(this, "A file by that name already exists! Do you want to overwrite the file?", "File already exists", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, new Object[] {"Yes", "No", "Cancel"}, "Cancel");
                    if (n == 2) return;
                    if (n == 0) exists = false;
                }
            }
            if (path.getName().endsWith(".nbt")) {
                CriteriaConverter.toNBTFile(this.filters, path, CompressionMode.GZIP);
            } else if (path.getName().endsWith(".json")) {
                CriteriaConverter.toJSONFile(this.filters, path, (Charset.isSupported("UTF-8") ? Charset.forName("UTF-8") : Charset.defaultCharset()));
            } else if (path.getName().endsWith(".xml")) {
                CriteriaConverter.toXMLFile(this.filters, path, (Charset.isSupported("UTF-8") ? Charset.forName("UTF-8") : Charset.defaultCharset()));
            } else if (path.getName().endsWith(".yml") || path.getName().endsWith(".yaml")) {
                CriteriaConverter.toYAMLFile(this.filters, path, (Charset.isSupported("UTF-8") ? Charset.forName("UTF-8") : Charset.defaultCharset()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            JFileChooser jfc = FileDialogUI.getFilterOpenChooser();
            int sfd = jfc.showOpenDialog(this);
            if (sfd != JFileChooser.APPROVE_OPTION) return;
            File path = jfc.getSelectedFile();
            final HashMap<String, MaterialData> loaded = CriteriaConverter.fromNBTFile(path, CompressionMode.GZIP);
            this.filters.putAll(loaded);
            updateFilterList();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterListGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterListGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterListGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterListGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FilterListGui dialog = new FilterListGui(new javax.swing.JFrame(), new HashMap<String, MaterialData>());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
