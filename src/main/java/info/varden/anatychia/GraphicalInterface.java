/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package info.varden.anatychia;

import java.util.ArrayList;
import java.util.EnumMap;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Marius
 */
public class GraphicalInterface extends javax.swing.JFrame {

    /**
     * Creates new form GraphicalInterface
     */
    public GraphicalInterface() {
        this.saves = Main.worldList();
        initComponents();
    }
    
    private MaterialData[] worldData = null;
    private HashMap<String, MaterialData> advFilters = new HashMap<String, MaterialData>();
    private boolean shouldStoreFilters = false;
    private final EnumMap<MaterialType, Long> typeList = new EnumMap<MaterialType, Long>(MaterialType.class);
    
    private static TableModelListener stdTml = new TableModelListener() {

        @Override
        public void tableChanged(TableModelEvent e) {
            TableModel model = (TableModel) e.getSource();
            if (e.getColumn() == 0) {
                for (int i = e.getFirstRow(); i <= e.getLastRow(); i++) {
                    Object bln = model.getValueAt(i, 0);
                    double perc = (Double) model.getValueAt(i, 1);
                    if (perc == 0D) model.setValueAt(bln == null || !((Boolean) bln) ? 0D : 100D, i, 1);
                }
            } else if (e.getColumn() == 1) {
                for (int i = e.getFirstRow(); i <= e.getLastRow(); i++) {
                    double perc = (Double) model.getValueAt(i, 1);
                    if (perc < 0D) model.setValueAt(0D, i, 1);
                    else if (perc > 100D) model.setValueAt(100D, i, 1);
                }
            }
        }
        
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Anatychia " + CommonInfo.VERSION_V);

        ArrayList<String> levels = new ArrayList<String>();
        for (info.varden.anatychia.SaveData save : this.saves) {
            levels.add(save.getLevelName() + " (" + save.getLocation().getParentFile().getParentFile().getName() + " >> " + save.getFolderName() + ")");
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(levels.toArray(new String[0])));

        jLabel1.setText("Please select world:");

        jButton1.setText("Analyze");
        jButton1.setEnabled(this.saves.length > 0);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jProgressBar1.setString("Ready to analyze");
        jProgressBar1.setStringPainted(true);

        jLabel2.setText("World analyzation results:");

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Remove object", "Removal percentage", "Object type", "Object name", "Quantity", "Quantity per sector", "Percentage of world"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getModel().addTableModelListener(stdTml);
        jTable1.setEnabled(false);
        jTable1.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Remove selected objects from world");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Deselect all");
        jButton3.setEnabled(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Advanced filters...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel3.setText("No advanced filters used");

        jButton5.setText("Select all");
        jButton5.setEnabled(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 796, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jLabel3)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jButton1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton5.setEnabled(false);
        jComboBox1.setEnabled(false);
        if (!this.shouldStoreFilters) {
            this.advFilters.clear();
            jLabel3.setText("No advanced filters used");
        }
        final ProgressUpdater pu = new ProgressUpdater() {

            private String mode = "";
            private boolean showPerc = false;
            
            @Override
            public void updated(int value, int max) {
                if (value == -1) {
                    mode = "Locating sectors in file";
                    showPerc = true;
                    return;
                } else if (value == -2) {
                    mode = "Analyzing sector";
                    showPerc = true;
                    return;
                } else if (value == -3) {
                    mode = "Preparing analyzation...";
                    showPerc = false;
                    return;
                } else if (value < 0) {
                    return;
                }
                int curMax = jProgressBar1.getMaximum();
                if (value > curMax) {
                    jProgressBar1.setValue(0);
                }
                jProgressBar1.setMaximum(max);
                if (value > max) {
                    value = max;
                }
                jProgressBar1.setValue(value);
                if (showPerc) {
                    jProgressBar1.setString(this.mode + " " + value + " of " + max + " (" + Math.round(((double) value / (double) max) * 100D) + "%)");
                } else {
                    jProgressBar1.setString(this.mode);
                }
            }

            @Override
            public void setIndeterminate(boolean indeterminate) {
                jProgressBar1.setIndeterminate(indeterminate);
            }
            
        };
        Runnable r = new Runnable() {

            @Override
            public void run() {
                MaterialDataList mdl = Main.materialList(saves[jComboBox1.getSelectedIndex()], pu);
                typeList.clear();
                worldData = mdl.toArray();
                Object[][] td = new Object[worldData.length][7];
                for (int i = 0; i < worldData.length; i++) {
                    if (typeList.containsKey(worldData[i].getType())) {
                        typeList.put(worldData[i].getType(), typeList.get(worldData[i].getType()) + worldData[i].getQuantity());
                    } else {
                        typeList.put(worldData[i].getType(), worldData[i].getQuantity());
                    }
                    td[i][0] = false;
                    td[i][1] = 0D;
                    td[i][2] = worldData[i].getType().getName();
                    td[i][3] = AnvilDictionary.getHumanReadableDescription(worldData[i].getType(), worldData[i].getName());
                    td[i][4] = worldData[i].getQuantity();
                    double dec4 = (Math.round((double) worldData[i].getQuantity() / (double) mdl.getSectors() * 10000D) / 100D);
                    td[i][5] = dec4;
                    double perc5 = (Math.round((double) worldData[i].getQuantity() / (double) mdl.getTotalQuantity(worldData[i].getType()) * 100000D) / 1000D);
                    td[i][6] = perc5 + " %";
                }
                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    td,
                    new String [] {
                        "Remove object", "Removal percentage", "Object type", "Object name", "Quantity", "Quantity per sector", "Percentage of world"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Boolean.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Double.class, java.lang.String.class
                    };
                    boolean[] canEdit = new boolean [] {
                        true, true, false, false, false, false, false
                    };

                    @Override
                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                
                jTable1.getModel().addTableModelListener(stdTml);
                
                jProgressBar1.setString("Analyzation complete!");
                jButton1.setEnabled(true);
                jComboBox1.setEnabled(true);
                jTable1.setEnabled(true);
                jButton2.setEnabled(true);
                jButton3.setEnabled(true);
                jButton5.setEnabled(true);
            }
            
        };
        
        Thread t = new Thread(r);
        t.start();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int count = jTable1.getModel().getRowCount();
        for (int i = 0; i < count; i++) {
            jTable1.getModel().setValueAt(false, i, 0);
            jTable1.getModel().setValueAt(0D, i, 1);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Object[] options = {"Yes, purge my world!",
                    "No, don't touch my world!"};
        int n = JOptionPane.showOptionDialog(this,
            "Are you sure you want to purge your world for the selected objects? This action can not be reversed!",
            "Confirm purge",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.WARNING_MESSAGE,
            null,
            options,
            options[1]);
        if (n == 1) {
            return;
        }
        ArrayList<MaterialData> filters = new ArrayList<MaterialData>();
        int count = jTable1.getModel().getRowCount();
        for (int i = 0; i < count; i++) {
            Object bln = jTable1.getModel().getValueAt(i, 0);
            if (bln != null && (Boolean) bln) {
                worldData[i].setRemovalChance(((Double) jTable1.getModel().getValueAt(i, 1)) / 100D);
                filters.add(worldData[i]);
            }
        }
        filters.addAll(this.advFilters.values());
        final MaterialData[] filterArray = filters.toArray(new MaterialData[0]);
        
        for (MaterialData d : filterArray) {
            System.out.println(d);
        }
        
        jButton1.setEnabled(false);
        jComboBox1.setEnabled(false);
        jTable1.setEnabled(false);
        jButton2.setEnabled(false);
        jButton3.setEnabled(false);
        jButton5.setEnabled(false);
        final ProgressUpdater pu = new ProgressUpdater() {

            private String mode = "";
            private boolean showPerc = false;
            
            @Override
            public void updated(int value, int max) {
                if (value == -1) {
                    mode = "Locating sectors in file";
                    showPerc = true;
                    return;
                } else if (value == -2) {
                    mode = "Processing sector";
                    showPerc = true;
                    return;
                } else if (value == -3) {
                    mode = "Preparing world modification...";
                    showPerc = false;
                    return;
                } else if (value < 0) {
                    return;
                }
                int curMax = jProgressBar1.getMaximum();
                if (value > curMax) {
                    jProgressBar1.setValue(0);
                }
                jProgressBar1.setMaximum(max);
                if (value > max) {
                    value = max;
                }
                jProgressBar1.setValue(value);
                if (showPerc) {
                    jProgressBar1.setString(this.mode + " " + value + " of " + max + " (" + Math.round(((double) value / (double) max) * 100D) + "%)");
                } else {
                    jProgressBar1.setString(this.mode);
                }
            }

            @Override
            public void setIndeterminate(boolean indeterminate) {
                jProgressBar1.setIndeterminate(indeterminate);
            }
            
        };
        Runnable r = new Runnable() {

            @Override
            public void run() {
                MaterialDataList mdl = Main.materialList(saves[jComboBox1.getSelectedIndex()], pu, filterArray);
                typeList.clear();
                worldData = mdl.toArray();
                Object[][] td = new Object[worldData.length][7];
                for (int i = 0; i < worldData.length; i++) {
                    if (typeList.containsKey(worldData[i].getType())) {
                        typeList.put(worldData[i].getType(), typeList.get(worldData[i].getType()) + worldData[i].getQuantity());
                    } else {
                        typeList.put(worldData[i].getType(), worldData[i].getQuantity());
                    }
                    td[i][0] = false;
                    td[i][1] = 0D;
                    td[i][2] = worldData[i].getType().getName();
                    td[i][3] = AnvilDictionary.getHumanReadableDescription(worldData[i].getType(), worldData[i].getName());
                    td[i][4] = worldData[i].getQuantity();
                    double dec4 = (Math.round((double) worldData[i].getQuantity() / (double) mdl.getSectors() * 10000D) / 100D);
                    td[i][5] = dec4;
                    double perc5 = (Math.round((double) worldData[i].getQuantity() / (double) mdl.getTotalQuantity(worldData[i].getType()) * 100000D) / 1000D);
                    td[i][6] = perc5 + " %";
                }
                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    td,
                    new String [] {
                        "Remove object", "Removal percentage", "Object type", "Object name", "Quantity", "Quantity per sector", "Percentage of world"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Boolean.class, java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class, java.lang.Double.class, java.lang.String.class
                    };
                    boolean[] canEdit = new boolean [] {
                        true, true, false, false, false, false, false
                    };

                    @Override
                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                
                jTable1.getModel().addTableModelListener(stdTml);
                
                jProgressBar1.setString("World successfully processed!");
                jButton1.setEnabled(true);
                jComboBox1.setEnabled(true);
                jTable1.setEnabled(true);
                jButton2.setEnabled(true);
                jButton3.setEnabled(true);
                jButton5.setEnabled(true);
            }
            
        };
        
        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        FilterListGui flg = new FilterListGui(this, this.advFilters);
        flg.setLocationRelativeTo(this);
        flg.setStoreFilters(this.shouldStoreFilters);
        flg.setVisible(true);
        if (flg.isSaved()) {
            this.advFilters = flg.getFilters();
            this.shouldStoreFilters = flg.shouldStoreFilters();
            jLabel3.setText(this.advFilters.size() > 0 ? String.format("%s advanced filter(s) used", this.advFilters.size()) : "No advanced filters used");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        SelectAllTypeSelector sats = new SelectAllTypeSelector(this, this.typeList);
        sats.setLocationRelativeTo(this);
        sats.setVisible(true);
        if (sats.isOK()) {
            MaterialType[] mt = sats.getSelectedTypes();
            for (MaterialType m : mt) {
                int count = jTable1.getModel().getRowCount();
                for (int i = 0; i < count; i++) {
                    System.out.println(i);
                    if (jTable1.getModel().getValueAt(i, 2).equals(m.getName())) {
                        System.out.println("ok");
                        jTable1.getModel().setValueAt(true, i, 0);
                        jTable1.getModel().setValueAt(100D, i, 1);
                    }
                }
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicalInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GraphicalInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox jComboBox1;
    private final info.varden.anatychia.SaveData[] saves;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
